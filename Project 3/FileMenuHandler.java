import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.LinkedList;
import java.util.StringTokenizer;

/**
 * This class implements an ActionListener to handle "File" menu events for the RomanNumeralGUI.
 * It has methods to open a file and read its contents, populating two linked lists with
 * RomanNumeral nodes. The lists are then displayed in the given Text Area using the printList method.
 */
public class FileMenuHandler implements ActionListener {
   RomanNumeralGUI jframe;
   public FileMenuHandler (RomanNumeralGUI jf) {
      jframe = jf;
   }
   /**
    * Handles the action events generated by menu items in the application.
    * @param event the ActionEvent object representing the action event generated by a menu item.
    */
   public void actionPerformed(ActionEvent event) {
      //get name of event
      String menuName = event.getActionCommand();
      if (menuName.equals("Open"))
         openFile();
      else if (menuName.equals("Quit"))
         System.exit(0);
   } //actionPerformed

   /**
    * Opens a file using a file chooser dialog.
    * The selected file is then passed to the readSource() method for further processing.
    */
   private void openFile(){
      int status;
      JFileChooser chooser = new JFileChooser();
      status = chooser.showOpenDialog(null);
      readSource(chooser.getSelectedFile());
   } //openFile

   /**
    * Reads lines of text from a file containing Roman numerals seperated by commas, tokenzies it and inserts each
    * Roman numeral into unsorted and sorted LinkedLists.
    * @param chosenFile the file to read Roman numerals from
    */
   private void readSource(File chosenFile) {

      //generate empty LinkedLists
      UnsortedRomanNumeralList myUnsortedList = new UnsortedRomanNumeralList();
      SortedRomanNumeralList mySortedList = new SortedRomanNumeralList();

      //retrieve the absolute path of the chosen input file
      String chosenFileName = chosenFile.getAbsolutePath();

      //read a line of text from the file and tokenize it
      TextFileInput in = new TextFileInput(chosenFileName);
      String line = in.readLine();
      StringTokenizer myTokens = new StringTokenizer(line, ",");

      //populate each LinkedList with RomanNumeral nodes
      while(true) {
         //increment through each Roman numeral (token) in the line
         for (int i = 0; myTokens.hasMoreTokens(); i++) {
            //temporary placeholder for the Roman numeral string
            String temp = myTokens.nextToken();
            //validates each character in the Roman numeral token, outputs invalid numerals to console
            try{
               RomanNumeral r = new RomanNumeral(temp);
               myUnsortedList.append(r);
               mySortedList.add(r);
            } catch (IllegalRomanNumeralException irne){
               System.out.println("Invalid character(s) in Roman Numeral: "+ temp);
            }
         }//end for
         line = in.readLine();
         //exit the while loop when all lines containing Roman numerals have been read
         if (line == null) {
            break;
         } else {
            myTokens = new StringTokenizer(line, ",");
         }//end if
      }//end while

      //output lists to GUI
      printList(jframe.sortedList,mySortedList );
      printList(jframe.unsortedList, myUnsortedList);
      
   } //readSource

   /**
    * Prints the contents of a LinkedList to the given TextArea
    * @param s TextArea to display the data
    * @param list LinkedList to be displayed
    */
   private void printList(TextArea s, RomanNumeralList list){
      RomanNumeralListNode p = list.first.next;
      //increments through each node in the list and appends it to the text area
      while(p != null){
         if (list instanceof UnsortedRomanNumeralList){
            jframe.myRomanNumerals.append(p.data.getRomanNumeral()+"\n");
         }
         s.append(p.data.getArabicValue()+"\n");
         p = p.next;
      }
   }// printList
}


